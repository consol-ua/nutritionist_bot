# handlers.py
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from datetime import datetime
from .database import db
from .sheets_export import export_users_to_sheet

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –¥—ñ—î—Ç–∏ —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è"
    
    await update.message.reply_text(welcome_message)

    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.  –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –±–∞–∑—ñ, –≤—ñ—Ç–∞—î –π–æ–≥–æ,
    —ñ–Ω–∞–∫—à–µ –ø—Ä–æ–ø–æ–Ω—É—î –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    user = update.effective_user

    if db.user_exists(user.id):
        await update.message.reply_text("üëã –¢–∏ –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ üòä", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    else:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        button = KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
        keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=keyboard
        )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î, —Ç–∞ –≤—ñ—Ç–∞—î –π–æ–≥–æ.
    """
    user = update.effective_user
    contact = update.message.contact

    if contact and contact.user_id == user.id:
        phone = contact.phone_number
        
        if not db.user_exists(user.id):
            user_data = {
                'user_id': user.id,
                'first_name': user.first_name or "",
                'last_name': user.last_name or "",
                'username': f"@{user.username}" if user.username else "",
                'phone': phone,
                'created_at': datetime.now()
            }
            db.add_user(user_data)
            await update.message.reply_text(f"üéâ –í—ñ—Ç–∞—î–º–æ, {user.first_name}! –¢–µ–±–µ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏.", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –≤—ñ—Ç–∞—î–º–æ
        else:
            await update.message.reply_text("–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π üòä", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    else:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.")

async def export_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Google Sheets"""
    try:
        result = export_users_to_sheet()
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ: {str(e)}")