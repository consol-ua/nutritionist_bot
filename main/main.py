import os
import asyncio
import logging
from dotenv import load_dotenv
from telegram import Update, BotCommand, BotCommandScopeDefault
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from handlers import start, contact_handler, export_users, handle_sheet_url, WAITING_FOR_SHEET_URL, button_callback, handle_text_message
from flask import Flask, request, jsonify
import threading
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"

# Flask App —ñ Telegram Application
app = Flask(__name__)
application = ApplicationBuilder().token(BOT_TOKEN).build()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def setup_commands():
    commands = [
        BotCommand("start", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand("cabinet", "üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç"),
        BotCommand("contact", "üì± –ó–≤'—è–∑–æ–∫ –∑—ñ –º–Ω–æ—é"),
        BotCommand("export", "üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    ]
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–∞–Ω–¥–∏
    await application.bot.delete_my_commands()
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
    await application.bot.set_my_commands(
        commands,
        scope=BotCommandScopeDefault()
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("cabinet", lambda update, context: button_callback(update, context, "personal_cabinet")))
application.add_handler(CommandHandler("contact", lambda update, context: button_callback(update, context, "contact_menu")))
application.add_handler(CallbackQueryHandler(button_callback))
application.add_handler(ConversationHandler(
    entry_points=[CommandHandler("export", export_users)],
    states={
        WAITING_FOR_SHEET_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sheet_url)]
    },
    fallbacks=[]
))
application.add_handler(MessageHandler(filters.CONTACT, contact_handler))

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π event loop
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
loop.run_until_complete(application.initialize())
loop.run_until_complete(setup_commands())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É event loop –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def run_event_loop():
    asyncio.set_event_loop(loop)
    loop.run_forever()

# –ó–∞–ø—É—Å–∫–∞—î–º–æ event loop –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
threading.Thread(target=run_event_loop, daemon=True).start()

# –û–±—Ä–æ–±–∫–∞ Telegram-–æ–Ω–æ–≤–ª–µ–Ω—å
async def process_update(update):
    logger.info(f"‚ñ∂Ô∏è –í process_update()")
    await application.process_update(update)
    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ process_update()")

def process_update_in_thread(update):
    """–û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
    asyncio.run_coroutine_threadsafe(process_update(update), loop)

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û—Ç—Ä–∏–º—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    try:
        data = request.get_json()
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {data}")
        update = Update.de_json(data, application.bot)

        # –û–±—Ä–æ–±–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        threading.Thread(target=process_update_in_thread, args=(update,)).start()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"})

@app.route("/ping", methods=['GET'])
def ping():
    return "pong", 200

# Flask –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
