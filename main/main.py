import os
import gspread
from datetime import datetime
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CRED = os.getenv("GOOGLE_SHEETS_CRED")
SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")

def get_sheet():
    """
    –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø –¥–æ Google Sheet.
    """
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(GOOGLE_CRED, scopes=scope)
    client = gspread.authorize(creds)
    return client.open(SHEET_NAME).sheet1

def user_exists(sheet, user_id):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ç–∞–±–ª–∏—Ü—ñ.

    Args:
        sheet: –ê—Ä–∫—É—à Google Sheet.
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.

    Returns:
        True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, —ñ–Ω–∞–∫—à–µ False.
    """
    records = sheet.get_all_records()
    print(f"–ó–Ω–∞—á–µ–Ω–Ω—è records: {records}")  # –í–∏–≤–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è records
    return any(str(row.get("User ID")) == str(user_id) for row in records)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start.  –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –±–∞–∑—ñ, –≤—ñ—Ç–∞—î –π–æ–≥–æ,
    —ñ–Ω–∞–∫—à–µ –ø—Ä–æ–ø–æ–Ω—É—î –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    user = update.effective_user
    
    sheet = get_sheet()

    print(f"–ó–Ω–∞—á–µ–Ω–Ω—è user id: {user.id}")  # –í–∏–≤–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è user id

    if user_exists(sheet, user.id):
        await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç —â–µ —Ä–∞–∑! –¢–∏ –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ üòä", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    else:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        button = KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
        keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=keyboard
        )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î.
    """
    user = update.effective_user
    contact = update.message.contact

    if contact and contact.user_id == user.id:
        phone = contact.phone_number
        sheet = get_sheet()

        if not user_exists(sheet, user.id):
            row = [
                user.first_name or "",
                user.last_name or "",
                f"@{user.username}" if user.username else "",
                user.id,
                phone,
                datetime.now().strftime("%Y-%m-%d")
            ]
            sheet.append_row(row)
            await update.message.reply_text("‚úÖ –î—è–∫—É—é! –¢–µ–±–µ –¥–æ–¥–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—é.", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        else:
            await update.message.reply_text("–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π üòä", reply_markup=ReplyKeyboardRemove()) #–ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    else:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.")

def main():
    """
    –ó–∞–ø—É—Å–∫–∞—î Telegram-–±–æ—Ç–∞.
    """
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î. –û—á—ñ–∫—É—î –∫–æ–Ω—Ç–∞–∫—Ç–∏...")
    app.run_polling()

if __name__ == "__main__":
    main()
