import os
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from handlers import start, contact_handler
from flask import Flask, request, jsonify
import threading


# # ‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env (—Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ)
# dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
# load_dotenv(dotenv_path)

# üîß –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"  # üìå Telegram –±—É–¥–µ —Å–ª–∞—Ç–∏ POST –∑–∞–ø–∏—Ç–∏ —Å—é–¥–∏

# üì¶ Flask App —ñ Telegram Application
app = Flask(__name__)
application = ApplicationBuilder().token(BOT_TOKEN).build()

# üì© –û–±—Ä–æ–±–Ω–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.CONTACT, contact_handler))

# üß† –û–±—Ä–æ–±–∫–∞ Telegram-–æ–Ω–æ–≤–ª–µ–Ω—å
async def process_update(update):
    print(f"‚ñ∂Ô∏è –í process_update()")
    await application.process_update(update)
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ process_update()")

# üìå Event loop –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ async –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ Cloud Run
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

def process_update_in_thread(update):
    """–û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
    loop.run_until_complete(process_update(update))

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    """–û—Ç—Ä–∏–º—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    try:
        data = request.get_json()
        print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {data}")
        update = Update.de_json(data, application.bot)

        # üß† –ö–ª—é—á–æ–≤–∏–π –º–æ–º–µ–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        threading.Thread(target=process_update_in_thread, args=(update,)).start()

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"})

@app.route("/ping", methods=["GET"])
def ping():
    return "pong", 200

# üöÄ –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –∞–±–æ –∑–∞–ø—É—Å–∫ —É Cloud Run
if __name__ == "__main__":
    # üìå –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Telegram Application
    loop.run_until_complete(application.initialize())

    # ‚úÖ Flask –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö, –ø–æ—Ä—Ç –∑–∞–¥–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω–æ—é PORT
    app.run(host="0.0.0.0", port=PORT)
