from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.templates.responses import send_instagram_invite, send_hypothyroidism_video
import logging

logger = logging.getLogger(__name__)
router = Router()

class SurveyStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"""
    answering = State()

# –ü–∏—Ç–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
SURVEY_QUESTIONS = [
    "–í–∏ –Ω–∞–±–∏—Ä–∞—î—Ç–µ –≤–∞–≥—É –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö –Ω–∞ —Ç–µ –ø—Ä–∏—á–∏–Ω (—Å–∫–ª–∞–¥–Ω–æ —Å—Ö—É–¥–Ω—É—Ç–∏)",
    "–†—É–∫–∏, –Ω–æ–≥–∏ —ñ —Ç—ñ–ª–æ –º–µ—Ä–∑–Ω—É—Ç—å –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω",
    "–í—ñ–¥—á—É–≤–∞—î—Ç–µ –ø–æ—Å—Ç—ñ–π–Ω—É –≤—Ç–æ–º—É, –ø—ñ—Å–ª—è —ó–∂—ñ —Ö–æ—á–µ—Ç—å—Å—è —Å–ø–∞—Ç–∏",
    "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—î—é, \"—Ç—É–º–∞–Ω –≤ –≥–æ–ª–æ–≤—ñ\" / –∑–Ω–∏–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ, —Å–∫–ª–∞–¥–Ω–æ –∑–æ—Å–µ—Ä–µ–¥–∏—Ç–∏—Å—å",
    "–¢—É—Ä–±—É—é—Ç—å –Ω–∞–±—Ä—è–∫–∏ —Ç–∞ –∑–∞–∫—Ä–µ–ø",
    "–°—É—Ö—ñ—Å—Ç—å —à–∫—ñ—Ä–∏, –ª–∞–º–∫—ñ—Å—Ç—å —Ç–∞ –≤–∏–ø–∞–¥—ñ–Ω–Ω—è –≤–æ–ª–æ—Å—Å—è",
    "–†—ñ–¥—à–∞—é—Ç—å –±—Ä–æ–≤–∏"
]

def get_survey_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¢–∞–∫/–ù—ñ"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="answer_yes"),
                InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="answer_no")
            ]
        ]
    )

@router.callback_query(F.data == "start_survey")
async def start_survey(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    await state.set_state(SurveyStates.answering)
    await state.update_data(current_question=0, answers=[])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    await send_question(callback.message, 0)
    await callback.answer()

async def send_question(message: Message, question_index: int):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–∏—Ç–∞–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º"""
    progress_text = f"–ü—Ä–æ–≥—Ä–µ—Å: {question_index + 1}/{len(SURVEY_QUESTIONS)}"
    new_text = f"{progress_text}\n\n{SURVEY_QUESTIONS[question_index]}"
    
    try:
        await message.edit_text(
            new_text,
            reply_markup=get_survey_keyboard()
        )
    except Exception as e:
        logger.error(f"Error updating question: {str(e)}")
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
        await message.answer(
            new_text,
            reply_markup=get_survey_keyboard()
        )

@router.callback_query(SurveyStates.answering, F.data.in_(["answer_yes", "answer_no"]))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        data = await state.get_data()
        current_question = data["current_question"]
        answers = data["answers"]
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        answer = callback.data == "answer_yes"
        answers.append(answer)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await state.update_data(
            current_question=current_question + 1,
            answers=answers
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è
        if current_question + 1 < len(SURVEY_QUESTIONS):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
            await send_question(callback.message, current_question + 1)
        else:
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
            await callback.message.edit_text(
                "–î—è–∫—É—é! –í–∏ –ø—Ä–æ–π—à–ª–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è üìùüíõ"
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å True
            if any(answers):
                await send_hypothyroidism_video(callback.message)
            else:
                await send_instagram_invite(callback.message)
            
            logger.info(f"User {callback.from_user.id} completed the survey. Answers: {answers}")
            await state.clear()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error processing answer: {str(e)}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True) 